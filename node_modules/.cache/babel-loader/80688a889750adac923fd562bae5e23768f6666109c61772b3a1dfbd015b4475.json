{"ast":null,"code":"var _jsxFileName = \"/Users/gimtaehunegimtaehune/Documents/GitHub/gaetaeng/BetBall/src/components/GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = ({\n  players,\n  gameStarted\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [obstacles, setObstacles] = useState([]); // 장애물 상태\n  const [ballPositions, setBallPositions] = useState([]); // 공들의 위치 상태\n  const [ballVelocities, setBallVelocities] = useState([]); // 공들의 속도 상태\n  const [ballColors, setBallColors] = useState([]); // 공 색상 상태\n\n  // 장애물 초기화 함수\n  const initializeObstacles = () => {\n    const newObstacles = [{\n      x: 100,\n      y: 150,\n      width: 50,\n      height: 10\n    },\n    // 장애물 1\n    {\n      x: 250,\n      y: 250,\n      width: 50,\n      height: 10\n    },\n    // 장애물 2\n    {\n      x: 400,\n      y: 350,\n      width: 50,\n      height: 10\n    } // 장애물 3\n    ];\n    setObstacles(newObstacles); // 장애물 상태 업데이트\n  };\n\n  // 공 초기화 함수\n  const initializeBalls = () => {\n    const initialPositions = players.map((_, index) => ({\n      x: 50 + index * 100,\n      y: 100 // 초기 Y 위치\n    }));\n    const initialVelocities = players.map(() => ({\n      dx: 0,\n      // X 속도\n      dy: 2 // Y 속도 (낙하하는 속도)\n    }));\n    const colors = ['red', 'blue', 'green', 'yellow', 'purple']; // 공 색상 설정\n    setBallPositions(initialPositions); // 공의 위치 상태 업데이트\n    setBallVelocities(initialVelocities); // 공의 속도 상태 업데이트\n    setBallColors(colors.slice(0, players.length)); // 공 색상 설정\n  };\n\n  // 게임 시작 시 공 초기화\n  useEffect(() => {\n    if (gameStarted) {\n      initializeBalls(); // 게임 시작 시 공 초기화\n      initializeObstacles(); // 장애물 초기화\n    }\n  }, [gameStarted, players]);\n\n  // 게임을 그리기 위한 useEffect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const drawGame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스를 지운다\n\n      // 장애물 그리기\n      obstacles.forEach(obstacle => {\n        ctx.fillStyle = 'black'; // 장애물 색상\n        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height); // 장애물 그리기\n      });\n\n      // 공 그리기\n      ballPositions.forEach((ball, index) => {\n        ctx.beginPath();\n        ctx.arc(ball.x, ball.y, 20, 0, Math.PI * 2); // 공 그리기\n        ctx.fillStyle = ballColors[index]; // 공 색상 설정\n        ctx.fill();\n        ctx.stroke();\n\n        // 공 위에 참여자 이름 표시\n        ctx.fillStyle = 'black'; // 이름 색상\n        ctx.font = '12px Arial';\n        ctx.fillText(players[index], ball.x - 20, ball.y - 30); // 공 위에 이름\n\n        // 공의 위치 업데이트 (속도에 따라)\n        ball.y += ballVelocities[index].dy;\n        ball.x += ballVelocities[index].dx;\n\n        // 공이 바닥에 닿았으면 위치 고정\n        if (ball.y >= canvas.height - 20) {\n          ball.y = canvas.height - 20; // 바닥에 닿으면 위치 고정\n        }\n      });\n    };\n\n    // 게임 루프\n    const gameInterval = setInterval(drawGame, 16); // 60fps로 게임을 그리기\n\n    return () => clearInterval(gameInterval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [players, obstacles, ballPositions, ballVelocities, ballColors, gameStarted]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"800\",\n      height: \"600\",\n      style: {\n        background: 'rgb(240, 240, 240)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"Fxma/OUCEWEU2kDNOptqeQzpGTI=\");\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","GameCanvas","players","gameStarted","_s","canvasRef","obstacles","setObstacles","ballPositions","setBallPositions","ballVelocities","setBallVelocities","ballColors","setBallColors","initializeObstacles","newObstacles","x","y","width","height","initializeBalls","initialPositions","map","_","index","initialVelocities","dx","dy","colors","slice","length","canvas","current","ctx","getContext","drawGame","clearRect","forEach","obstacle","fillStyle","fillRect","ball","beginPath","arc","Math","PI","fill","stroke","font","fillText","gameInterval","setInterval","clearInterval","children","ref","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gimtaehunegimtaehune/Documents/GitHub/gaetaeng/BetBall/src/components/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst GameCanvas = ({ players, gameStarted }) => {\n  const canvasRef = useRef(null);\n  const [obstacles, setObstacles] = useState([]); // 장애물 상태\n  const [ballPositions, setBallPositions] = useState([]); // 공들의 위치 상태\n  const [ballVelocities, setBallVelocities] = useState([]); // 공들의 속도 상태\n  const [ballColors, setBallColors] = useState([]); // 공 색상 상태\n\n  // 장애물 초기화 함수\n  const initializeObstacles = () => {\n    const newObstacles = [\n      { x: 100, y: 150, width: 50, height: 10 }, // 장애물 1\n      { x: 250, y: 250, width: 50, height: 10 }, // 장애물 2\n      { x: 400, y: 350, width: 50, height: 10 }, // 장애물 3\n    ];\n    setObstacles(newObstacles); // 장애물 상태 업데이트\n  };\n\n  // 공 초기화 함수\n  const initializeBalls = () => {\n    const initialPositions = players.map((_, index) => ({\n      x: 50 + index * 100,\n      y: 100, // 초기 Y 위치\n    }));\n\n    const initialVelocities = players.map(() => ({\n      dx: 0, // X 속도\n      dy: 2, // Y 속도 (낙하하는 속도)\n    }));\n\n    const colors = ['red', 'blue', 'green', 'yellow', 'purple']; // 공 색상 설정\n    setBallPositions(initialPositions); // 공의 위치 상태 업데이트\n    setBallVelocities(initialVelocities); // 공의 속도 상태 업데이트\n    setBallColors(colors.slice(0, players.length)); // 공 색상 설정\n  };\n\n  // 게임 시작 시 공 초기화\n  useEffect(() => {\n    if (gameStarted) {\n      initializeBalls(); // 게임 시작 시 공 초기화\n      initializeObstacles(); // 장애물 초기화\n    }\n  }, [gameStarted, players]);\n\n  // 게임을 그리기 위한 useEffect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const drawGame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스를 지운다\n\n      // 장애물 그리기\n      obstacles.forEach((obstacle) => {\n        ctx.fillStyle = 'black'; // 장애물 색상\n        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height); // 장애물 그리기\n      });\n\n      // 공 그리기\n      ballPositions.forEach((ball, index) => {\n        ctx.beginPath();\n        ctx.arc(ball.x, ball.y, 20, 0, Math.PI * 2); // 공 그리기\n        ctx.fillStyle = ballColors[index]; // 공 색상 설정\n        ctx.fill();\n        ctx.stroke();\n\n        // 공 위에 참여자 이름 표시\n        ctx.fillStyle = 'black'; // 이름 색상\n        ctx.font = '12px Arial';\n        ctx.fillText(players[index], ball.x - 20, ball.y - 30); // 공 위에 이름\n\n        // 공의 위치 업데이트 (속도에 따라)\n        ball.y += ballVelocities[index].dy;\n        ball.x += ballVelocities[index].dx;\n\n        // 공이 바닥에 닿았으면 위치 고정\n        if (ball.y >= canvas.height - 20) {\n          ball.y = canvas.height - 20; // 바닥에 닿으면 위치 고정\n        }\n      });\n    };\n\n    // 게임 루프\n    const gameInterval = setInterval(drawGame, 16); // 60fps로 게임을 그리기\n\n    return () => clearInterval(gameInterval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [players, obstacles, ballPositions, ballVelocities, ballColors, gameStarted]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width=\"800\" height=\"600\" style={{ background: 'rgb(240, 240, 240)' }} />\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,UAAU,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD;EACA,MAAMgB,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,YAAY,GAAG,CACnB;MAAEC,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC;IAAE;IAC3C;MAAEH,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC;IAAE;IAC3C;MAAEH,CAAC,EAAE,GAAG;MAAEC,CAAC,EAAE,GAAG;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAC,CAAE;IAAA,CAC5C;IACDZ,YAAY,CAACQ,YAAY,CAAC,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMK,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,gBAAgB,GAAGnB,OAAO,CAACoB,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,MAAM;MAClDR,CAAC,EAAE,EAAE,GAAGQ,KAAK,GAAG,GAAG;MACnBP,CAAC,EAAE,GAAG,CAAE;IACV,CAAC,CAAC,CAAC;IAEH,MAAMQ,iBAAiB,GAAGvB,OAAO,CAACoB,GAAG,CAAC,OAAO;MAC3CI,EAAE,EAAE,CAAC;MAAE;MACPC,EAAE,EAAE,CAAC,CAAE;IACT,CAAC,CAAC,CAAC;IAEH,MAAMC,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7DnB,gBAAgB,CAACY,gBAAgB,CAAC,CAAC,CAAC;IACpCV,iBAAiB,CAACc,iBAAiB,CAAC,CAAC,CAAC;IACtCZ,aAAa,CAACe,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE3B,OAAO,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;EAClD,CAAC;;EAED;EACAlC,SAAS,CAAC,MAAM;IACd,IAAIO,WAAW,EAAE;MACfiB,eAAe,CAAC,CAAC,CAAC,CAAC;MACnBN,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACX,WAAW,EAAED,OAAO,CAAC,CAAC;;EAE1B;EACAN,SAAS,CAAC,MAAM;IACd,MAAMmC,MAAM,GAAG1B,SAAS,CAAC2B,OAAO;IAChC,MAAMC,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEnC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrBF,GAAG,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACb,KAAK,EAAEa,MAAM,CAACZ,MAAM,CAAC,CAAC,CAAC;;MAElD;MACAb,SAAS,CAAC+B,OAAO,CAAEC,QAAQ,IAAK;QAC9BL,GAAG,CAACM,SAAS,GAAG,OAAO,CAAC,CAAC;QACzBN,GAAG,CAACO,QAAQ,CAACF,QAAQ,CAACtB,CAAC,EAAEsB,QAAQ,CAACrB,CAAC,EAAEqB,QAAQ,CAACpB,KAAK,EAAEoB,QAAQ,CAACnB,MAAM,CAAC,CAAC,CAAC;MACzE,CAAC,CAAC;;MAEF;MACAX,aAAa,CAAC6B,OAAO,CAAC,CAACI,IAAI,EAAEjB,KAAK,KAAK;QACrCS,GAAG,CAACS,SAAS,CAAC,CAAC;QACfT,GAAG,CAACU,GAAG,CAACF,IAAI,CAACzB,CAAC,EAAEyB,IAAI,CAACxB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE2B,IAAI,CAACC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QAC7CZ,GAAG,CAACM,SAAS,GAAG3B,UAAU,CAACY,KAAK,CAAC,CAAC,CAAC;QACnCS,GAAG,CAACa,IAAI,CAAC,CAAC;QACVb,GAAG,CAACc,MAAM,CAAC,CAAC;;QAEZ;QACAd,GAAG,CAACM,SAAS,GAAG,OAAO,CAAC,CAAC;QACzBN,GAAG,CAACe,IAAI,GAAG,YAAY;QACvBf,GAAG,CAACgB,QAAQ,CAAC/C,OAAO,CAACsB,KAAK,CAAC,EAAEiB,IAAI,CAACzB,CAAC,GAAG,EAAE,EAAEyB,IAAI,CAACxB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;;QAExD;QACAwB,IAAI,CAACxB,CAAC,IAAIP,cAAc,CAACc,KAAK,CAAC,CAACG,EAAE;QAClCc,IAAI,CAACzB,CAAC,IAAIN,cAAc,CAACc,KAAK,CAAC,CAACE,EAAE;;QAElC;QACA,IAAIe,IAAI,CAACxB,CAAC,IAAIc,MAAM,CAACZ,MAAM,GAAG,EAAE,EAAE;UAChCsB,IAAI,CAACxB,CAAC,GAAGc,MAAM,CAACZ,MAAM,GAAG,EAAE,CAAC,CAAC;QAC/B;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,MAAM+B,YAAY,GAAGC,WAAW,CAAChB,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;;IAEhD,OAAO,MAAMiB,aAAa,CAACF,YAAY,CAAC,CAAC,CAAC;EAC5C,CAAC,EAAE,CAAChD,OAAO,EAAEI,SAAS,EAAEE,aAAa,EAAEE,cAAc,EAAEE,UAAU,EAAET,WAAW,CAAC,CAAC;EAEhF,oBACEH,OAAA;IAAAqD,QAAA,eACErD,OAAA;MAAQsD,GAAG,EAAEjD,SAAU;MAACa,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC,KAAK;MAACoC,KAAK,EAAE;QAAEC,UAAU,EAAE;MAAqB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7F,CAAC;AAEV,CAAC;AAACxD,EAAA,CA5FIH,UAAU;AAAA4D,EAAA,GAAV5D,UAAU;AA8FhB,eAAeA,UAAU;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}