{"ast":null,"code":"var _jsxFileName = \"/Users/gimtaehunegimtaehune/Documents/GitHub/gaetaeng/BetBall/src/components/GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = ({\n  players,\n  gameStarted\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [obstacles, setObstacles] = useState([]); // 장애물 상태\n  const [ballPositions, setBallPositions] = useState([]); // 공들의 위치 상태\n  const [ballVelocities, setBallVelocities] = useState([]); // 공들의 속도 상태\n  const [ballColors, setBallColors] = useState([]); // 공 색상 상태\n\n  // 장애물 초기화 함수 (다양한 장애물 종류)\n  const initializeObstacles = () => {\n    const newObstacles = [{\n      type: 'rect',\n      x: 100,\n      y: 150,\n      width: 50,\n      height: 10\n    },\n    // 직사각형 장애물\n    {\n      type: 'circle',\n      x: 250,\n      y: 250,\n      radius: 25\n    },\n    // 원형 장애물\n    {\n      type: 'rect',\n      x: 400,\n      y: 350,\n      width: 80,\n      height: 15\n    },\n    // 큰 직사각형 장애물\n    {\n      type: 'circle',\n      x: 600,\n      y: 400,\n      radius: 30\n    } // 또 다른 원형 장애물\n    ];\n    setObstacles(newObstacles); // 장애물 상태 업데이트\n  };\n\n  // 공 초기화 함수\n  const initializeBalls = () => {\n    const initialPositions = players.map((_, index) => ({\n      x: 50 + index * 100,\n      y: 100 // 초기 Y 위치\n    }));\n    const initialVelocities = players.map(() => ({\n      dx: 0,\n      // X 속도\n      dy: 0 // Y 속도 (초기에는 0으로 시작)\n    }));\n    const colors = ['red', 'blue', 'green', 'yellow', 'purple']; // 공 색상 설정\n    setBallPositions(initialPositions); // 공의 위치 상태 업데이트\n    setBallVelocities(initialVelocities); // 공의 속도 상태 업데이트\n    setBallColors(colors.slice(0, players.length)); // 공 색상 설정\n  };\n\n  // 게임 시작 시 공 초기화\n  useEffect(() => {\n    if (gameStarted) {\n      initializeBalls(); // 게임 시작 시 공 초기화\n      initializeObstacles(); // 장애물 초기화\n    }\n  }, [gameStarted, players]);\n\n  // 중력 상수 (Y 방향으로 떨어지도록 설정)\n  const GRAVITY = 0.1;\n\n  // 충돌 감지 함수 (공과 장애물)\n  const checkCollisions = () => {\n    const updatedBallPositions = [...ballPositions];\n    const updatedBallVelocities = [...ballVelocities];\n    updatedBallPositions.forEach((ball, index) => {\n      obstacles.forEach(obstacle => {\n        // 충돌 감지: 공과 장애물이 겹치는지 확인\n        if (obstacle.type === 'rect') {\n          // 직사각형 장애물과 충돌 검사\n          if (ball.x + 20 > obstacle.x &&\n          // 공이 장애물의 x 범위에 있을 때\n          ball.x - 20 < obstacle.x + obstacle.width &&\n          // 공이 장애물의 x 범위에 있을 때\n          ball.y + 20 > obstacle.y &&\n          // 공이 장애물의 y 범위에 있을 때\n          ball.y - 20 < obstacle.y + obstacle.height // 공이 장애물의 y 범위에 있을 때\n          ) {\n            updatedBallVelocities[index].dy = -updatedBallVelocities[index].dy; // 공이 튕겨 나가도록\n            updatedBallPositions[index].y = obstacle.y - 20; // 공을 장애물 위로 올리기\n          }\n        } else if (obstacle.type === 'circle') {\n          // 원형 장애물과 충돌 검사\n          const distX = ball.x - obstacle.x;\n          const distY = ball.y - obstacle.y;\n          const distance = Math.sqrt(distX * distX + distY * distY);\n          if (distance < 20 + obstacle.radius) {\n            updatedBallVelocities[index].dy = -updatedBallVelocities[index].dy; // 공이 튕겨 나가도록\n            updatedBallPositions[index].y = obstacle.y - (20 + obstacle.radius); // 공을 장애물 위로 올리기\n          }\n        }\n      });\n    });\n    setBallPositions(updatedBallPositions);\n    setBallVelocities(updatedBallVelocities);\n  };\n\n  // 게임을 그리기 위한 useEffect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const drawGame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스를 지운다\n\n      // 장애물 그리기\n      obstacles.forEach(obstacle => {\n        if (obstacle.type === 'rect') {\n          ctx.fillStyle = 'black'; // 직사각형 장애물 색상\n          ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height); // 장애물 그리기\n        } else if (obstacle.type === 'circle') {\n          ctx.fillStyle = 'orange'; // 원형 장애물 색상\n          ctx.beginPath();\n          ctx.arc(obstacle.x, obstacle.y, obstacle.radius, 0, Math.PI * 2); // 원형 장애물 그리기\n          ctx.fill();\n        }\n      });\n\n      // 공 그리기\n      ballPositions.forEach((ball, index) => {\n        ctx.beginPath();\n        ctx.arc(ball.x, ball.y, 20, 0, Math.PI * 2); // 공 그리기\n        ctx.fillStyle = ballColors[index]; // 공 색상 설정\n        ctx.fill();\n        ctx.stroke();\n\n        // 공 위에 참여자 이름 표시\n        ctx.fillStyle = 'black'; // 이름 색상\n        ctx.font = '12px Arial';\n        ctx.fillText(players[index], ball.x - 20, ball.y - 30); // 공 위에 이름\n\n        // 공의 위치 업데이트 (속도에 따라)\n        updatedBallVelocities[index].dy += GRAVITY; // 중력 적용 (Y 방향으로 떨어짐)\n        ball.y += updatedBallVelocities[index].dy;\n        ball.x += updatedBallVelocities[index].dx;\n\n        // 공이 바닥에 닿았으면 위치 고정\n        if (ball.y >= canvas.height - 20) {\n          ball.y = canvas.height - 20; // 바닥에 닿으면 위치 고정\n        }\n      });\n\n      // 충돌 체크 및 공의 위치/속도 업데이트\n      checkCollisions();\n    };\n\n    // 게임 루프\n    const gameInterval = setInterval(drawGame, 16); // 60fps로 게임을 그리기\n\n    return () => clearInterval(gameInterval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [players, obstacles, ballPositions, ballVelocities, ballColors, gameStarted]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"800\",\n      height: \"600\",\n      style: {\n        background: 'rgb(240, 240, 240)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"Fxma/OUCEWEU2kDNOptqeQzpGTI=\");\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","GameCanvas","players","gameStarted","_s","canvasRef","obstacles","setObstacles","ballPositions","setBallPositions","ballVelocities","setBallVelocities","ballColors","setBallColors","initializeObstacles","newObstacles","type","x","y","width","height","radius","initializeBalls","initialPositions","map","_","index","initialVelocities","dx","dy","colors","slice","length","GRAVITY","checkCollisions","updatedBallPositions","updatedBallVelocities","forEach","ball","obstacle","distX","distY","distance","Math","sqrt","canvas","current","ctx","getContext","drawGame","clearRect","fillStyle","fillRect","beginPath","arc","PI","fill","stroke","font","fillText","gameInterval","setInterval","clearInterval","children","ref","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gimtaehunegimtaehune/Documents/GitHub/gaetaeng/BetBall/src/components/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst GameCanvas = ({ players, gameStarted }) => {\n  const canvasRef = useRef(null);\n  const [obstacles, setObstacles] = useState([]); // 장애물 상태\n  const [ballPositions, setBallPositions] = useState([]); // 공들의 위치 상태\n  const [ballVelocities, setBallVelocities] = useState([]); // 공들의 속도 상태\n  const [ballColors, setBallColors] = useState([]); // 공 색상 상태\n\n  // 장애물 초기화 함수 (다양한 장애물 종류)\n  const initializeObstacles = () => {\n    const newObstacles = [\n      { type: 'rect', x: 100, y: 150, width: 50, height: 10 }, // 직사각형 장애물\n      { type: 'circle', x: 250, y: 250, radius: 25 }, // 원형 장애물\n      { type: 'rect', x: 400, y: 350, width: 80, height: 15 }, // 큰 직사각형 장애물\n      { type: 'circle', x: 600, y: 400, radius: 30 }, // 또 다른 원형 장애물\n    ];\n    setObstacles(newObstacles); // 장애물 상태 업데이트\n  };\n\n  // 공 초기화 함수\n  const initializeBalls = () => {\n    const initialPositions = players.map((_, index) => ({\n      x: 50 + index * 100,\n      y: 100, // 초기 Y 위치\n    }));\n\n    const initialVelocities = players.map(() => ({\n      dx: 0, // X 속도\n      dy: 0, // Y 속도 (초기에는 0으로 시작)\n    }));\n\n    const colors = ['red', 'blue', 'green', 'yellow', 'purple']; // 공 색상 설정\n    setBallPositions(initialPositions); // 공의 위치 상태 업데이트\n    setBallVelocities(initialVelocities); // 공의 속도 상태 업데이트\n    setBallColors(colors.slice(0, players.length)); // 공 색상 설정\n  };\n\n  // 게임 시작 시 공 초기화\n  useEffect(() => {\n    if (gameStarted) {\n      initializeBalls(); // 게임 시작 시 공 초기화\n      initializeObstacles(); // 장애물 초기화\n    }\n  }, [gameStarted, players]);\n\n  // 중력 상수 (Y 방향으로 떨어지도록 설정)\n  const GRAVITY = 0.1;\n\n  // 충돌 감지 함수 (공과 장애물)\n  const checkCollisions = () => {\n    const updatedBallPositions = [...ballPositions];\n    const updatedBallVelocities = [...ballVelocities];\n\n    updatedBallPositions.forEach((ball, index) => {\n      obstacles.forEach((obstacle) => {\n        // 충돌 감지: 공과 장애물이 겹치는지 확인\n        if (obstacle.type === 'rect') {\n          // 직사각형 장애물과 충돌 검사\n          if (\n            ball.x + 20 > obstacle.x && // 공이 장애물의 x 범위에 있을 때\n            ball.x - 20 < obstacle.x + obstacle.width && // 공이 장애물의 x 범위에 있을 때\n            ball.y + 20 > obstacle.y && // 공이 장애물의 y 범위에 있을 때\n            ball.y - 20 < obstacle.y + obstacle.height // 공이 장애물의 y 범위에 있을 때\n          ) {\n            updatedBallVelocities[index].dy = -updatedBallVelocities[index].dy; // 공이 튕겨 나가도록\n            updatedBallPositions[index].y = obstacle.y - 20; // 공을 장애물 위로 올리기\n          }\n        } else if (obstacle.type === 'circle') {\n          // 원형 장애물과 충돌 검사\n          const distX = ball.x - obstacle.x;\n          const distY = ball.y - obstacle.y;\n          const distance = Math.sqrt(distX * distX + distY * distY);\n\n          if (distance < 20 + obstacle.radius) {\n            updatedBallVelocities[index].dy = -updatedBallVelocities[index].dy; // 공이 튕겨 나가도록\n            updatedBallPositions[index].y = obstacle.y - (20 + obstacle.radius); // 공을 장애물 위로 올리기\n          }\n        }\n      });\n    });\n\n    setBallPositions(updatedBallPositions);\n    setBallVelocities(updatedBallVelocities);\n  };\n\n  // 게임을 그리기 위한 useEffect\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const drawGame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스를 지운다\n\n      // 장애물 그리기\n      obstacles.forEach((obstacle) => {\n        if (obstacle.type === 'rect') {\n          ctx.fillStyle = 'black'; // 직사각형 장애물 색상\n          ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height); // 장애물 그리기\n        } else if (obstacle.type === 'circle') {\n          ctx.fillStyle = 'orange'; // 원형 장애물 색상\n          ctx.beginPath();\n          ctx.arc(obstacle.x, obstacle.y, obstacle.radius, 0, Math.PI * 2); // 원형 장애물 그리기\n          ctx.fill();\n        }\n      });\n\n      // 공 그리기\n      ballPositions.forEach((ball, index) => {\n        ctx.beginPath();\n        ctx.arc(ball.x, ball.y, 20, 0, Math.PI * 2); // 공 그리기\n        ctx.fillStyle = ballColors[index]; // 공 색상 설정\n        ctx.fill();\n        ctx.stroke();\n\n        // 공 위에 참여자 이름 표시\n        ctx.fillStyle = 'black'; // 이름 색상\n        ctx.font = '12px Arial';\n        ctx.fillText(players[index], ball.x - 20, ball.y - 30); // 공 위에 이름\n\n        // 공의 위치 업데이트 (속도에 따라)\n        updatedBallVelocities[index].dy += GRAVITY; // 중력 적용 (Y 방향으로 떨어짐)\n        ball.y += updatedBallVelocities[index].dy;\n        ball.x += updatedBallVelocities[index].dx;\n\n        // 공이 바닥에 닿았으면 위치 고정\n        if (ball.y >= canvas.height - 20) {\n          ball.y = canvas.height - 20; // 바닥에 닿으면 위치 고정\n        }\n      });\n\n      // 충돌 체크 및 공의 위치/속도 업데이트\n      checkCollisions();\n    };\n\n    // 게임 루프\n    const gameInterval = setInterval(drawGame, 16); // 60fps로 게임을 그리기\n\n    return () => clearInterval(gameInterval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [players, obstacles, ballPositions, ballVelocities, ballColors, gameStarted]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width=\"800\" height=\"600\" style={{ background: 'rgb(240, 240, 240)' }} />\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}