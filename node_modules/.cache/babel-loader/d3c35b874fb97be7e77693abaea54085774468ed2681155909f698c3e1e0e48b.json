{"ast":null,"code":"var _jsxFileName = \"/Users/gimtaehunegimtaehune/Documents/GitHub/gaetaeng/BetBall/src/components/GameCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameCanvas = ({\n  players,\n  gameStarted\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [obstacles, setObstacles] = useState([]);\n  const [ballPositions, setBallPositions] = useState([]); // 공들의 위치 상태 추가\n  const [ballVelocities, setBallVelocities] = useState([]); // 공들의 속도 상태 추가\n\n  // 장애물 초기화\n  const initializeObstacles = () => {\n    const newObstacles = [{\n      x: 100,\n      y: 150,\n      width: 50,\n      height: 10\n    }, {\n      x: 250,\n      y: 250,\n      width: 50,\n      height: 10\n    }, {\n      x: 400,\n      y: 350,\n      width: 50,\n      height: 10\n    }];\n    setObstacles(newObstacles);\n  };\n\n  // 공의 초기 위치 및 속도 설정\n  const initializeBalls = () => {\n    const initialPositions = players.map((_, index) => ({\n      x: 50 + index * 100,\n      y: 100 // 초기 Y 위치\n    }));\n    const initialVelocities = players.map(() => ({\n      dx: 0,\n      // X 속도\n      dy: 2 // Y 속도 (낙하하는 속도)\n    }));\n    setBallPositions(initialPositions);\n    setBallVelocities(initialVelocities);\n  };\n\n  // 게임 시작 시 공 초기화\n  useEffect(() => {\n    if (gameStarted) {\n      initializeBalls(); // 게임이 시작되면 공 초기화\n    }\n  }, [gameStarted]);\n\n  // 장애물 그리기 및 공 움직임 처리\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const drawGame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스를 지운다\n\n      // 장애물 그리기\n      obstacles.forEach(obstacle => {\n        ctx.fillStyle = 'black';\n        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n      });\n\n      // 공 그리기\n      ballPositions.forEach((ball, index) => {\n        ctx.beginPath();\n        ctx.arc(ball.x, ball.y, 20, 0, Math.PI * 2); // 공 그리기\n        ctx.fillStyle = 'blue'; // 공 색상\n        ctx.fill();\n        ctx.stroke();\n\n        // 공의 위치 업데이트 (속도에 따라)\n        ball.y += ballVelocities[index].dy;\n        ball.x += ballVelocities[index].dx;\n\n        // 공이 바닥에 닿았으면 속도를 감소시키거나 멈추게 하는 등의 처리 추가 가능\n        if (ball.y >= canvas.height - 20) {\n          ball.y = canvas.height - 20; // 바닥에 닿으면 위치 고정\n        }\n      });\n    };\n\n    // 게임 루프\n    const gameInterval = setInterval(drawGame, 16); // 60fps로 게임을 그리기\n\n    return () => clearInterval(gameInterval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [players, obstacles, ballPositions, ballVelocities, gameStarted]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: \"800\",\n      height: \"600\",\n      style: {\n        background: 'rgb(240, 240, 240)'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"noL3RpiNBHT0Tuq65Bstwf7NETI=\");\n_c = GameCanvas;\nexport default GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","GameCanvas","players","gameStarted","_s","canvasRef","obstacles","setObstacles","ballPositions","setBallPositions","ballVelocities","setBallVelocities","initializeObstacles","newObstacles","x","y","width","height","initializeBalls","initialPositions","map","_","index","initialVelocities","dx","dy","canvas","current","ctx","getContext","drawGame","clearRect","forEach","obstacle","fillStyle","fillRect","ball","beginPath","arc","Math","PI","fill","stroke","gameInterval","setInterval","clearInterval","children","ref","style","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gimtaehunegimtaehune/Documents/GitHub/gaetaeng/BetBall/src/components/GameCanvas.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst GameCanvas = ({ players, gameStarted }) => {\n  const canvasRef = useRef(null);\n  const [obstacles, setObstacles] = useState([]);\n  const [ballPositions, setBallPositions] = useState([]); // 공들의 위치 상태 추가\n  const [ballVelocities, setBallVelocities] = useState([]); // 공들의 속도 상태 추가\n\n  // 장애물 초기화\n  const initializeObstacles = () => {\n    const newObstacles = [\n      { x: 100, y: 150, width: 50, height: 10 },\n      { x: 250, y: 250, width: 50, height: 10 },\n      { x: 400, y: 350, width: 50, height: 10 },\n    ];\n    setObstacles(newObstacles);\n  };\n\n  // 공의 초기 위치 및 속도 설정\n  const initializeBalls = () => {\n    const initialPositions = players.map((_, index) => ({\n      x: 50 + index * 100,\n      y: 100, // 초기 Y 위치\n    }));\n\n    const initialVelocities = players.map(() => ({\n      dx: 0, // X 속도\n      dy: 2, // Y 속도 (낙하하는 속도)\n    }));\n\n    setBallPositions(initialPositions);\n    setBallVelocities(initialVelocities);\n  };\n\n  // 게임 시작 시 공 초기화\n  useEffect(() => {\n    if (gameStarted) {\n      initializeBalls(); // 게임이 시작되면 공 초기화\n    }\n  }, [gameStarted]);\n\n  // 장애물 그리기 및 공 움직임 처리\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    const drawGame = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height); // 캔버스를 지운다\n\n      // 장애물 그리기\n      obstacles.forEach((obstacle) => {\n        ctx.fillStyle = 'black';\n        ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n      });\n\n      // 공 그리기\n      ballPositions.forEach((ball, index) => {\n        ctx.beginPath();\n        ctx.arc(ball.x, ball.y, 20, 0, Math.PI * 2); // 공 그리기\n        ctx.fillStyle = 'blue'; // 공 색상\n        ctx.fill();\n        ctx.stroke();\n\n        // 공의 위치 업데이트 (속도에 따라)\n        ball.y += ballVelocities[index].dy;\n        ball.x += ballVelocities[index].dx;\n\n        // 공이 바닥에 닿았으면 속도를 감소시키거나 멈추게 하는 등의 처리 추가 가능\n        if (ball.y >= canvas.height - 20) {\n          ball.y = canvas.height - 20; // 바닥에 닿으면 위치 고정\n        }\n      });\n    };\n\n    // 게임 루프\n    const gameInterval = setInterval(drawGame, 16); // 60fps로 게임을 그리기\n\n    return () => clearInterval(gameInterval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [players, obstacles, ballPositions, ballVelocities, gameStarted]);\n\n  return (\n    <div>\n      <canvas ref={canvasRef} width=\"800\" height=\"600\" style={{ background: 'rgb(240, 240, 240)' }} />\n    </div>\n  );\n};\n\nexport default GameCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}